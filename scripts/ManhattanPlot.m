function ManhattanPlot( filename, varargin )
%   This function takes a GWAS output file  and plots a Manhattan Plot.
%%  ARGUMENTS:
%   sex: defaults to 0, set to 1 to include sex chromosomes
%   sig: defaults to 5e-8, significance threshold for horizontal line
%   vert: defaults to 0, set to 1 for tick labels have chr in them and are
%   written upwards
%   labels: defaults to [-1,-1]. Set to [x,y] to label the top SNP on each
%   locus with p<x. Locus defined by windows of y base pairs.
%   outfile: defaults to filename of input file, set to something else
%   to change name of output file
%   title: defaults to 'Manhattan Plot'. Fairly self-explanatory
%   save: defaults to 1, set to 0 to disable saving to save time
%   format: defaults to PLINK, options {PLINK,BOLT-LMM,SAIGE} This is used
%   to identify the correct column headings. If using anything else, rename
%   the header line so that CHR, BP, and P are the headers for chromosome,
%   base pair and p value, and the default PLINK should catch it
%%   Usage:
%   ManhattanPlot('gwas.assoc.fisher',varargin) will take the association
%   analysis in 'gwas.assoc.fisher, generate a Manhattan Plot, and store it
%   in gwas_ManhattanPlot.png, which should be publication-ready, and
%   gwas_ManhattanPlot.fig for minor readjustments in MATLAB's GUI. This is
%   fine as .fisher is a PLINK format file. For a SAIGE output (and
%   significance threshold 5e-9) with sex chromosomes shown, and the top
%   hit for each SNP within 1 mb and below p=1e-6 labelled, use
%   ManhattanPlot('gwas.saige','format','SAIGE','sig',5e-9,'sex',1, 'labels',[1e-6,1000000])
%   Tested using assoc, assoc.logistic and assoc.fisher files generated by
%   Plink 1.7. Also tested using BOLT-LMM and SAIGE.
%
%   Harry Green (2019) Genetics of Complex Traits, University of Exeter
%% Reading in optional arguments and input file
p = inputParser;
defaultsex = 0;
defaultvert = 0;
defaultsig = 5e-8;
defaultsave = 1;
defaultoutfile = filename;
defaulttitle= 'Manhattan Plot';
defaultlabels = [-1, -1];
defaultformat = 'PLINK';
expectedformat = {'PLINK','BOLT-LMM','SAIGE'};
addRequired(p,'filename');
% addOptional(p,'outfile',defaultoutfile,@ischar);
addOptional(p,'sex',defaultsex,@isnumeric);
addOptional(p,'vert',defaultvert,@isnumeric);
addOptional(p,'labels',defaultlabels,@isnumeric);
addOptional(p,'sig',defaultsig,@isnumeric);
addOptional(p,'save',defaultsave,@isnumeric);
addParameter(p,'format',defaultformat,...
    @(x) any(validatestring(x,expectedformat)));
addParameter(p,'outfile',defaultoutfile,@ischar);
addParameter(p,'title',defaulttitle,@ischar);
parse(p,filename,varargin{:});
filename=p.Results.filename;
sex=p.Results.sex;
vert=p.Results.vert;
sig=p.Results.sig;
save=p.Results.save;
format=p.Results.format;
outfile=p.Results.outfile;
labels=p.Results.labels;
plottitle=p.Results.title;
%MATLAB refuses to read file formats like .assoc, so first rename as .txt
copyfile(filename, strcat(filename,'.txt'));
opts = detectImportOptions( strcat(filename,'.txt'),'NumHeaderLines',0);
T = readtable(strcat(filename,'.txt'),opts); % the columns of T will be the headers of the assoc file
delete(strcat(filename,'.txt')) %delete unwanted .txt file that we didn't want anyway
%% File format defintitions
% This section uses the default column headings from PLINK, BOLT-LMM and
% SAIGE. Easy to modify for other software packages
if strcmp(format,'PLINK')
    tab2=[T.CHR,T.BP,T.P]; % These are the only useful columns for a manhattan plot, chromosome, base pair, p value
end
if strcmp(format,'BOLT-LMM')
    tab2=[T.CHR,T.BP,T.P_BOLT_LMM]; % These are the only useful columns for a manhattan plot, chromosome, base pair, p value
end
if strcmp(format,'SAIGE')
    tab2=[T.CHR,T.POS,T.p_value]; % These are the only useful columns for a manhattan plot, chromosome, base pair, p value
end
%%
if sex==0
    tab2=tab2(tab2(:,1)<23,:); %remove chr23 if not wanting sex chromosomes
end
bptrack=0; %variable to track base pairs, this helps the plotting function to know where to start plotting the next chromosome
tab2(tab2(:,3)==0,:)=[];
for i=1:22+sex
    hold on
    plot(tab2(tab2(:,1)==i,2)+max(bptrack),-log10(tab2(tab2(:,1)==i,3)),'.'); %a scatterplot. On the x axis, the base pair number + bptrack, which starts at 0. On the y axis, - log 10 p
    bptrack=[bptrack,max(bptrack)+max(max(tab2(tab2(:,1)==i,:)))]; %this updates bptrack by adding the highest base pair number of the chromosome. At the end, we should get the total number of base pairs in the human genome. All values of bptrack are stored in a vector. They're useful later
end
ylimit=max(max(-log10(tab2(:,3)))+1); %if strongest hit is 1e-60, plot window goes up to 1e-61
ylimitmin=min(min(-log10(tab2(:,3)))); %and down to the highest p value.
plot([0,max(bptrack)],-log10([sig,sig]),'k--') %genome wide significant line, uses the sig optional argument which defaults to 5e-8
ylabel('$-\log_{10}(p)$','Interpreter','latex')
xlim([0,max(bptrack)])
ylim([floor(ylimitmin),max(ylimit,-log10(sig/5))]) %y axis will always go to the significance threshold/5 at least
M=movmean(bptrack,2); %this calculates the moving average of bptrack and uses them as chromosome label markers. This puts them in the middle of each chromosome.
xticks(M(2:end));
%% Rotation section
% this section of the code changes the x axis label orientation.
if vert ==0
    xlabel('Chromosome','Interpreter','latex')
    xticklabels( 1:23 );
end
if vert ==1
    xtickangle(90)
    xticklabels( {'chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10','chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20','chr21','chr22','chrXY'});
end
%% Annotation section
% this section of the code annotates the top SNP on each locus
if ~(labels(1)==-1|labels(2)==-1) % Neither of these should be negative. Defaults to -1 -1
    labellim=labels(1);
    labelprox=labels(2);
    
    tab3=tab2(tab2(:,3)<labellim,:); %as nothing else will be used for labelling, the reduced table is easier to manage
    [~,index]=sort(tab3(:,3)); %easier if they're in ascending order of p value;
    tab3=tab3(index,:);
    labelledsnps=[0,0,0]; %this becomes a list of SNPs that have been labelled. It starts with a dummy SNP to give the first SNP something to compare with. This will always fail so the first label always gets added
    
    for i=1:size(tab3,1)
        test=abs(tab3(i,:)-labelledsnps);
        if sum(test(:,1)==0&test(:,2)<labelprox)==0 %if there are no snps on the same chromosome and within 1 MB
            plot(bptrack(tab3(i,1))+tab3(i,2),-log10(tab3(i,3)),'ks','MarkerSize',8,'LineWidth',1) %this plots a square over the corresponding dot
            labels=strcat('chr',string(tab3(i,1)),':',string(bptrack(tab3(i,1))+tab3(i,2))); %this puts together a strong of chrx:y
            text(bptrack(tab3(i,1))+tab3(i,2),-log10(tab3(i,3))+0.05,char(labels),'VerticalAlignment','bottom','HorizontalAlignment','left','Interpreter','latex') %this plots the label above and to the left of the dot, shifted up by 0.05 to give some space
            labelledsnps=[labelledsnps;tab3(i,:)];
        end
    end
end
%% finalising file
a = strsplit(outfile,'.'); % takes the output file name up to the first decimal point
box on
title(plottitle,'Interpreter','latex','fontsize',14)
if save~=0
    name=[a{1},'_ManhattanPlot.fig']; %adds _ManhattanPlot to filenames
    savefig(name);
    set(gcf, 'paperunits', 'centimeters', 'paperposition', [0 0 25 10])
    print([a{1},'_ManhattanPlot.png'],'-dpng','-r600', '-painters')
end
end